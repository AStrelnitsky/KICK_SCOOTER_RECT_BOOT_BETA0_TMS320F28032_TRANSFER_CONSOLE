/*
 * esp8266.h
 *
 *  Created on: Jan 9, 2022
 *      Author: AS
 */
#include "stdint.h"
#include "stddef.h"

#ifndef F2802X_COMMON_INCLUDE_ESP8266_H_
#define F2802X_COMMON_INCLUDE_ESP8266_H_
#define SCI_TX_SIZE 54
#define SCI_RX_SIZE 144

typedef enum
{
    ESP8266_IS_NOT_CONFIGURED = 0,
    ESP8266_IS_UDP_CLIENT,
    ESP8266_IS_TCP_CLIENT,
    ESP8266_IS_TCP_SERVER

}ESP8266_CONFIG_STATUS;
typedef enum
{
    ESP8266_IDLE = 0,
    ESP8266_MUX_SET_TX,
    ESP8266_MUX_SET_RX,
    ESP8266_MUX_SET_OK,
    ESP8266_MUX_SET_ERROR,
    ESP8266_CIPSTART_UDP_TX,
    ESP8266_CIPSTART_UDP_RX,
    ESP8266_CIPSTART_UDP_OK,
    ESP8266_CIPSTART_UDP_ERROR,
    ESP8266_AT_TX,
    ESP8266_AT_RX,
    ESP8266_AT_OK,
    ESP8266_AT_ERROR,
    ESP8266_CIPMODE_TX,
    ESP8266_CIPMODE_RX,
    ESP8266_CIPMODE_OK,
    ESP8266_CIPMODE_STATION_TX,
    ESP8266_CIPMODE_STATION_RX,
    ESP8266_CIPMODE_STATION_OK,
    ESP8266_CIPMODE_AP_TX,
    ESP8266_CIPMODE_AP_RX,
    ESP8266_CIPMODE_AP_OK,
    ESP8266_CIPMODE_ERROR,
    ESP8266_CIPSEND_TX,
    ESP8266_CIPSEND_RX,
    ESP8266_CIPSEND_OK,
    ESP8266_CIPSEND_ERROR,
    ESP8266_CIPSTA_TX,
    ESP8266_CIPSTA_RX,
    ESP8266_CIPSTA_OK,
    ESP8266_CWMODE_STA_TX,
    ESP8266_CWMODE_STA_RX,
    ESP8266_CWMODE_STA_OK,
    ESP8266_CWLAP_SET_TX,
    ESP8266_CWLAP_SET_RX,
    ESP8266_CWLAP_SET_OK,
    ESP8266_CWLAP_EXE_TX,
    ESP8266_CWLAP_EXE_RX,
    ESP8266_CWLAP_EXE_OK,
    ESP8266_CWLAPOPT_TX,
    ESP8266_CWLAPOPT_RX,
    ESP8266_CWLAPOPT_OK,
    ESP8266_TCP_CLIENT_LISTENING,
    ESP8266_TCP_CLIENT_SENDING,
    ESP8266_CWJAP_TX,
    ESP8266_CWJAP_OK,
    ESP8266_CWQAP_TX,
    ESP8266_CWQAP_OK,
    ESP8266_CIPSTART_TCP_TX,
    ESP8266_CIPSTART_TCP_OK,
    ESP8266_AUTH_TX,
    ESP8266_AUTH_OK,
    ESP8266_BUSY

}CONNECT_STATUS;
typedef enum
{
    TCP_CLIENT_IS_NOT_CONNECTED = '0',
    TCP_CLIENT_IS_CONNECTED = '1'
}TCP_CLIENT_STATUS;
typedef struct
{
    char port[5];
    uint16_t port_size;
    char *ip[11];
    char channel;
    TCP_CLIENT_STATUS status;

}TCP_CLIENT;
typedef enum
{
    SERIAL_MODE_AT = 0,
    SERIAL_MODE_DATA

}SERIAL_MODE;
typedef enum
{
    TCP_SERVER_NOT_FOUND,
    TCP_SERVER_FOUNDED_AND_CONNECTED,
    TCP_SERVER_FOUNDED_AND_NOT_CONNECTED
}TCP_CONNECTION;
typedef struct
{
    char str[SCI_TX_SIZE];
    uint16_t len;
    uint16_t tx_flag;
    uint16_t console;
}AT_COMMAND;
typedef struct
{
    CONNECT_STATUS c_status;
    SERIAL_MODE s_mode;
    char AT_tx_buff[SCI_TX_SIZE];
    char AT_rx_buff[SCI_RX_SIZE];
    uint16_t sci_write_flag;
    ESP8266_CONFIG_STATUS config_status;
    uint16_t first_reqest;
    uint16_t reset_status;
    uint16_t reset_counter;
    TCP_CONNECTION tcp;
    uint16_t response_code;
}ESP8266;




#endif /* F2802X_COMMON_INCLUDE_ESP8266_H_ */
